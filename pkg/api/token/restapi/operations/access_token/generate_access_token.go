package access_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GenerateAccessTokenHandlerFunc turns a function with the right signature into a generate access token handler
type GenerateAccessTokenHandlerFunc func(GenerateAccessTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GenerateAccessTokenHandlerFunc) Handle(params GenerateAccessTokenParams) middleware.Responder {
	return fn(params)
}

// GenerateAccessTokenHandler interface for that can handle valid generate access token params
type GenerateAccessTokenHandler interface {
	Handle(GenerateAccessTokenParams) middleware.Responder
}

// NewGenerateAccessToken creates a new http.Handler for the generate access token operation
func NewGenerateAccessToken(ctx *middleware.Context, handler GenerateAccessTokenHandler) *GenerateAccessToken {
	return &GenerateAccessToken{Context: ctx, Handler: handler}
}

/*GenerateAccessToken swagger:route POST /token AccessToken generateAccessToken

Generate Access token

This is the URL of the Box token endpoint, the endpoint that returns access tokens. An access token is a data string that enables Box to verify that a request belongs to an authorized session.

*/
type GenerateAccessToken struct {
	Context *middleware.Context
	Handler GenerateAccessTokenHandler
}

func (o *GenerateAccessToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGenerateAccessTokenParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
