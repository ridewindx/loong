package access_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRevokeTokenParams creates a new RevokeTokenParams object
// with the default values initialized.
func NewRevokeTokenParams() RevokeTokenParams {
	var ()
	return RevokeTokenParams{}
}

// RevokeTokenParams contains all the bound params for the revoke token operation
// typically these are obtained from a http.Request
//
// swagger:parameters revokeToken
type RevokeTokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The client ID of the application requesting authentication.
	  Required: true
	  In: formData
	*/
	ClientID string
	/*The client secret of the application requesting authentication.
	  Required: true
	  In: formData
	*/
	ClientSecret string
	/*
	  Required: true
	  In: formData
	*/
	Token string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *RevokeTokenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	fdClientID, fdhkClientID, _ := fds.GetOK("client_id")
	if err := o.bindClientID(fdClientID, fdhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClientSecret, fdhkClientSecret, _ := fds.GetOK("client_secret")
	if err := o.bindClientSecret(fdClientSecret, fdhkClientSecret, route.Formats); err != nil {
		res = append(res, err)
	}

	fdToken, fdhkToken, _ := fds.GetOK("token")
	if err := o.bindToken(fdToken, fdhkToken, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RevokeTokenParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("client_id", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("client_id", "formData", raw); err != nil {
		return err
	}

	o.ClientID = raw

	return nil
}

func (o *RevokeTokenParams) bindClientSecret(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("client_secret", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("client_secret", "formData", raw); err != nil {
		return err
	}

	o.ClientSecret = raw

	return nil
}

func (o *RevokeTokenParams) bindToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("token", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("token", "formData", raw); err != nil {
		return err
	}

	o.Token = raw

	return nil
}
