package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ItemReference It references either a file or a folder
// swagger:model ItemReference
type ItemReference struct {
	Reference

	// A unique string identifying the version of this folder.
	// May be null for some folders such as root or trash.
	Etag string `json:"etag,omitempty"`

	// The name of the folder.
	Name string `json:"name,omitempty"`

	// A unique ID for use with the /events endpoint.
	// May be null for some folders such as root or trash.
	SequenceID string `json:"sequence_id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ItemReference) UnmarshalJSON(raw []byte) error {

	var aO0 Reference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Reference = aO0

	var data struct {
		Etag string `json:"etag,omitempty"`

		Name string `json:"name,omitempty"`

		SequenceID string `json:"sequence_id,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Etag = data.Etag

	m.Name = data.Name

	m.SequenceID = data.SequenceID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ItemReference) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Reference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		Etag string `json:"etag,omitempty"`

		Name string `json:"name,omitempty"`

		SequenceID string `json:"sequence_id,omitempty"`
	}

	data.Etag = m.Etag

	data.Name = m.Name

	data.SequenceID = m.SequenceID

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this item reference
func (m *ItemReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Reference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ItemReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemReference) UnmarshalBinary(b []byte) error {
	var res ItemReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
