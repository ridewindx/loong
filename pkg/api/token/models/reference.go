package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Reference reference
// swagger:model Reference
type Reference struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this reference
func (m *Reference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var referenceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["folder","file","user","file_version","lock","collaboration","comment","task","web_link","collection","task_assignment","event","realtime_server","webhook_event","webhook","enterprise","invite","email_alias","group","group_membership","device_pinner","retention_policy","retention_policy_assignment","file_version_retention","legal_hold_policy","legal_hold_policy_assignment","legal_hold","upload_session"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		referenceTypeTypePropEnum = append(referenceTypeTypePropEnum, v)
	}
}

const (
	// ReferenceTypeFolder captures enum value "folder"
	ReferenceTypeFolder string = "folder"
	// ReferenceTypeFile captures enum value "file"
	ReferenceTypeFile string = "file"
	// ReferenceTypeUser captures enum value "user"
	ReferenceTypeUser string = "user"
	// ReferenceTypeFileVersion captures enum value "file_version"
	ReferenceTypeFileVersion string = "file_version"
	// ReferenceTypeLock captures enum value "lock"
	ReferenceTypeLock string = "lock"
	// ReferenceTypeCollaboration captures enum value "collaboration"
	ReferenceTypeCollaboration string = "collaboration"
	// ReferenceTypeComment captures enum value "comment"
	ReferenceTypeComment string = "comment"
	// ReferenceTypeTask captures enum value "task"
	ReferenceTypeTask string = "task"
	// ReferenceTypeWebLink captures enum value "web_link"
	ReferenceTypeWebLink string = "web_link"
	// ReferenceTypeCollection captures enum value "collection"
	ReferenceTypeCollection string = "collection"
	// ReferenceTypeTaskAssignment captures enum value "task_assignment"
	ReferenceTypeTaskAssignment string = "task_assignment"
	// ReferenceTypeEvent captures enum value "event"
	ReferenceTypeEvent string = "event"
	// ReferenceTypeRealtimeServer captures enum value "realtime_server"
	ReferenceTypeRealtimeServer string = "realtime_server"
	// ReferenceTypeWebhookEvent captures enum value "webhook_event"
	ReferenceTypeWebhookEvent string = "webhook_event"
	// ReferenceTypeWebhook captures enum value "webhook"
	ReferenceTypeWebhook string = "webhook"
	// ReferenceTypeEnterprise captures enum value "enterprise"
	ReferenceTypeEnterprise string = "enterprise"
	// ReferenceTypeInvite captures enum value "invite"
	ReferenceTypeInvite string = "invite"
	// ReferenceTypeEmailAlias captures enum value "email_alias"
	ReferenceTypeEmailAlias string = "email_alias"
	// ReferenceTypeGroup captures enum value "group"
	ReferenceTypeGroup string = "group"
	// ReferenceTypeGroupMembership captures enum value "group_membership"
	ReferenceTypeGroupMembership string = "group_membership"
	// ReferenceTypeDevicePinner captures enum value "device_pinner"
	ReferenceTypeDevicePinner string = "device_pinner"
	// ReferenceTypeRetentionPolicy captures enum value "retention_policy"
	ReferenceTypeRetentionPolicy string = "retention_policy"
	// ReferenceTypeRetentionPolicyAssignment captures enum value "retention_policy_assignment"
	ReferenceTypeRetentionPolicyAssignment string = "retention_policy_assignment"
	// ReferenceTypeFileVersionRetention captures enum value "file_version_retention"
	ReferenceTypeFileVersionRetention string = "file_version_retention"
	// ReferenceTypeLegalHoldPolicy captures enum value "legal_hold_policy"
	ReferenceTypeLegalHoldPolicy string = "legal_hold_policy"
	// ReferenceTypeLegalHoldPolicyAssignment captures enum value "legal_hold_policy_assignment"
	ReferenceTypeLegalHoldPolicyAssignment string = "legal_hold_policy_assignment"
	// ReferenceTypeLegalHold captures enum value "legal_hold"
	ReferenceTypeLegalHold string = "legal_hold"
	// ReferenceTypeUploadSession captures enum value "upload_session"
	ReferenceTypeUploadSession string = "upload_session"
)

// prop value enum
func (m *Reference) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, referenceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Reference) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Reference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Reference) UnmarshalBinary(b []byte) error {
	var res Reference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
