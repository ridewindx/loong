package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ridewindx/loong/pkg/api/authorization/models"
)

// AuthorizeOKCode is the HTTP code returned for type AuthorizeOK
const AuthorizeOKCode int = 200

/*AuthorizeOK Opens up the login page for authentication. Upon successful authentication process, it will be redirected to <MY_REDIRECT_URI>?code=<MY_AUTHORIZATION_CODE>

swagger:response authorizeOK
*/
type AuthorizeOK struct {
}

// NewAuthorizeOK creates AuthorizeOK with default headers values
func NewAuthorizeOK() *AuthorizeOK {
	return &AuthorizeOK{}
}

// WriteResponse to the client
func (o *AuthorizeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*AuthorizeDefault Error response

swagger:response authorizeDefault
*/
type AuthorizeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.OAuthError `json:"body,omitempty"`
}

// NewAuthorizeDefault creates AuthorizeDefault with default headers values
func NewAuthorizeDefault(code int) *AuthorizeDefault {
	if code <= 0 {
		code = 500
	}

	return &AuthorizeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the authorize default response
func (o *AuthorizeDefault) WithStatusCode(code int) *AuthorizeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the authorize default response
func (o *AuthorizeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the authorize default response
func (o *AuthorizeDefault) WithPayload(payload *models.OAuthError) *AuthorizeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authorize default response
func (o *AuthorizeDefault) SetPayload(payload *models.OAuthError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthorizeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
