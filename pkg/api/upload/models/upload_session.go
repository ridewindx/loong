package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// UploadSession Upload Session.
// swagger:model UploadSession
type UploadSession struct {
	Reference

	// Tracks Boxâ€™s progress in processing all the parts that have been uploaded. Always equal to 0 when creating new upload session. In other cases, this will be the number of parts that have been processed by server. When all parts have been uploaded, but Commit API returned 202, you can check this value == total_parts to check if file was uploaded.
	NumPartsProcessed int32 `json:"num_parts_processed,omitempty"`

	// The part size in bytes that must be used for all parts of this session. Only the last part is allowed to be of a smaller size.
	PartSize int64 `json:"part_size,omitempty"`

	// session endpoints
	SessionEndpoints *UploadSessionEndpoints `json:"session_endpoints,omitempty"`

	// UTC Time in RFC 3339 date timeformat: 2016-04-17T09:12:36-00:00.
	SessionExpiresAt strfmt.DateTime `json:"session_expires_at,omitempty"`

	// The total number of parts expected in this session, as determined by the file size and part size.
	TotalParts int32 `json:"total_parts,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *UploadSession) UnmarshalJSON(raw []byte) error {

	var aO0 Reference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Reference = aO0

	var data struct {
		NumPartsProcessed int32 `json:"num_parts_processed,omitempty"`

		PartSize int64 `json:"part_size,omitempty"`

		SessionEndpoints *UploadSessionEndpoints `json:"session_endpoints,omitempty"`

		SessionExpiresAt strfmt.DateTime `json:"session_expires_at,omitempty"`

		TotalParts int32 `json:"total_parts,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.NumPartsProcessed = data.NumPartsProcessed

	m.PartSize = data.PartSize

	m.SessionEndpoints = data.SessionEndpoints

	m.SessionExpiresAt = data.SessionExpiresAt

	m.TotalParts = data.TotalParts

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m UploadSession) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Reference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		NumPartsProcessed int32 `json:"num_parts_processed,omitempty"`

		PartSize int64 `json:"part_size,omitempty"`

		SessionEndpoints *UploadSessionEndpoints `json:"session_endpoints,omitempty"`

		SessionExpiresAt strfmt.DateTime `json:"session_expires_at,omitempty"`

		TotalParts int32 `json:"total_parts,omitempty"`
	}

	data.NumPartsProcessed = m.NumPartsProcessed

	data.PartSize = m.PartSize

	data.SessionEndpoints = m.SessionEndpoints

	data.SessionExpiresAt = m.SessionExpiresAt

	data.TotalParts = m.TotalParts

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this upload session
func (m *UploadSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Reference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UploadSession) validateSessionEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.SessionEndpoints) { // not required
		return nil
	}

	if m.SessionEndpoints != nil {

		if err := m.SessionEndpoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("session_endpoints")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UploadSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UploadSession) UnmarshalBinary(b []byte) error {
	var res UploadSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
