package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserReference It references a user
// swagger:model UserReference
type UserReference struct {

	// Unqiue string identifying this user.
	ID string `json:"id,omitempty"`

	// The email address this user uses to login.
	Login string `json:"login,omitempty"`

	// Name of this user
	Name string `json:"name,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user reference
func (m *UserReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userReferenceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userReferenceTypeTypePropEnum = append(userReferenceTypeTypePropEnum, v)
	}
}

const (
	// UserReferenceTypeUser captures enum value "user"
	UserReferenceTypeUser string = "user"
)

// prop value enum
func (m *UserReference) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userReferenceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserReference) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserReference) UnmarshalBinary(b []byte) error {
	var res UserReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
