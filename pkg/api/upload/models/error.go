package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error error
// swagger:model Error
type Error struct {

	// code
	Code string `json:"code,omitempty"`

	// context info
	ContextInfo *ErrorContextInfo `json:"context_info,omitempty"`

	// help url
	HelpURL string `json:"help-url,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// request id
	RequestID string `json:"request-id,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContextInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateContextInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ContextInfo) { // not required
		return nil
	}

	if m.ContextInfo != nil {

		if err := m.ContextInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context_info")
			}
			return err
		}
	}

	return nil
}

var errorTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorTypeTypePropEnum = append(errorTypeTypePropEnum, v)
	}
}

const (
	// ErrorTypeError captures enum value "error"
	ErrorTypeError string = "error"
)

// prop value enum
func (m *Error) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, errorTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Error) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorContextInfo error context info
// swagger:model ErrorContextInfo
type ErrorContextInfo struct {

	// errors
	Errors []*ErrorContextInfoErrorsItems0 `json:"errors"`
}

// Validate validates this error context info
func (m *ErrorContextInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorContextInfo) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {

		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {

			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context_info" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorContextInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorContextInfo) UnmarshalBinary(b []byte) error {
	var res ErrorContextInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorContextInfoErrorsItems0 error context info errors items0
// swagger:model ErrorContextInfoErrorsItems0
type ErrorContextInfoErrorsItems0 struct {

	// message
	Message string `json:"message,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`
}

// Validate validates this error context info errors items0
func (m *ErrorContextInfoErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorContextInfoErrorsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorContextInfoErrorsItems0) UnmarshalBinary(b []byte) error {
	var res ErrorContextInfoErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
