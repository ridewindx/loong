package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Lock The lock held on the file.
// swagger:model Lock
type Lock struct {
	Reference

	// created at
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// created by
	CreatedBy *UserReference `json:"created_by,omitempty"`

	// expired at
	ExpiredAt strfmt.DateTime `json:"expired_at,omitempty"`

	// is download prevented
	IsDownloadPrevented bool `json:"is_download_prevented,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Lock) UnmarshalJSON(raw []byte) error {

	var aO0 Reference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Reference = aO0

	var data struct {
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		CreatedBy *UserReference `json:"created_by,omitempty"`

		ExpiredAt strfmt.DateTime `json:"expired_at,omitempty"`

		IsDownloadPrevented bool `json:"is_download_prevented,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.CreatedAt = data.CreatedAt

	m.CreatedBy = data.CreatedBy

	m.ExpiredAt = data.ExpiredAt

	m.IsDownloadPrevented = data.IsDownloadPrevented

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Lock) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Reference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		CreatedBy *UserReference `json:"created_by,omitempty"`

		ExpiredAt strfmt.DateTime `json:"expired_at,omitempty"`

		IsDownloadPrevented bool `json:"is_download_prevented,omitempty"`
	}

	data.CreatedAt = m.CreatedAt

	data.CreatedBy = m.CreatedBy

	data.ExpiredAt = m.ExpiredAt

	data.IsDownloadPrevented = m.IsDownloadPrevented

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this lock
func (m *Lock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Reference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lock) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {

		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Lock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lock) UnmarshalBinary(b []byte) error {
	var res Lock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
