package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CommitRequest commit request
// swagger:model CommitRequest
type CommitRequest struct {

	// Optional. An array of attributes to set on the created file. See https://box-content.readme.io/reference#file-object
	Attributes map[string]interface{} `json:"attributes,omitempty"`

	// An arrayof Part objects. MUST be ordered by offset.
	Parts []*Part `json:"parts"`
}

// Validate validates this commit request
func (m *CommitRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitRequest) validateParts(formats strfmt.Registry) error {

	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	for i := 0; i < len(m.Parts); i++ {

		if swag.IsZero(m.Parts[i]) { // not required
			continue
		}

		if m.Parts[i] != nil {

			if err := m.Parts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitRequest) UnmarshalBinary(b []byte) error {
	var res CommitRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
