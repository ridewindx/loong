package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ridewindx/loong/pkg/api/upload/models"
)

// NewCommitUploadSessionParams creates a new CommitUploadSessionParams object
// with the default values initialized.
func NewCommitUploadSessionParams() CommitUploadSessionParams {
	var ()
	return CommitUploadSessionParams{}
}

// CommitUploadSessionParams contains all the bound params for the commit upload session operation
// typically these are obtained from a http.Request
//
// swagger:parameters commitUploadSession
type CommitUploadSessionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The message digest of the file, formatted as specified by RFC 3230. The usage is sha=BASE64_ENCODED_DIGEST. Currently only SHA-1 is supported.As per RFC 3230, the output from SHA-1 algorithm must be Base64 encoded.
	  Required: true
	  In: header
	*/
	Digest string
	/*This is in the ‘etag’ field of the file object. See https://developer.box.com/v2.0/reference#if-match
	  In: header
	*/
	IfMatch *string
	/*This is in the ‘etag’ field of the file object. See https://developer.box.com/v2.0/reference#if-match
	  In: header
	*/
	IfNonMatch *string
	/*
	  Required: true
	  In: path
	*/
	SESSIONID string
	/*
	  Required: true
	  In: body
	*/
	Body *models.CommitRequest
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CommitUploadSessionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := o.bindDigest(r.Header[http.CanonicalHeaderKey("Digest")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindIfMatch(r.Header[http.CanonicalHeaderKey("If-Match")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindIfNonMatch(r.Header[http.CanonicalHeaderKey("If-Non-Match")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rSESSIONID, rhkSESSIONID, _ := route.Params.GetOK("SESSION_ID")
	if err := o.bindSESSIONID(rSESSIONID, rhkSESSIONID, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.CommitRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body"))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}

		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}

	} else {
		res = append(res, errors.Required("body", "body"))
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommitUploadSessionParams) bindDigest(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Digest", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("Digest", "header", raw); err != nil {
		return err
	}

	o.Digest = raw

	return nil
}

func (o *CommitUploadSessionParams) bindIfMatch(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.IfMatch = &raw

	return nil
}

func (o *CommitUploadSessionParams) bindIfNonMatch(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.IfNonMatch = &raw

	return nil
}

func (o *CommitUploadSessionParams) bindSESSIONID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.SESSIONID = raw

	return nil
}
