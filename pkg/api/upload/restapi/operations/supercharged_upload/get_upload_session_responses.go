package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ridewindx/loong/pkg/api/upload/models"
)

// GetUploadSessionOKCode is the HTTP code returned for type GetUploadSessionOK
const GetUploadSessionOKCode int = 200

/*GetUploadSessionOK Get would be successful

swagger:response getUploadSessionOK
*/
type GetUploadSessionOK struct {

	/*
	  In: Body
	*/
	Payload *models.UploadSession `json:"body,omitempty"`
}

// NewGetUploadSessionOK creates GetUploadSessionOK with default headers values
func NewGetUploadSessionOK() *GetUploadSessionOK {
	return &GetUploadSessionOK{}
}

// WithPayload adds the payload to the get upload session o k response
func (o *GetUploadSessionOK) WithPayload(payload *models.UploadSession) *GetUploadSessionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get upload session o k response
func (o *GetUploadSessionOK) SetPayload(payload *models.UploadSession) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUploadSessionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUploadSessionBadRequestCode is the HTTP code returned for type GetUploadSessionBadRequest
const GetUploadSessionBadRequestCode int = 400

/*GetUploadSessionBadRequest Bad request. See response body for details.

swagger:response getUploadSessionBadRequest
*/
type GetUploadSessionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUploadSessionBadRequest creates GetUploadSessionBadRequest with default headers values
func NewGetUploadSessionBadRequest() *GetUploadSessionBadRequest {
	return &GetUploadSessionBadRequest{}
}

// WithPayload adds the payload to the get upload session bad request response
func (o *GetUploadSessionBadRequest) WithPayload(payload *models.Error) *GetUploadSessionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get upload session bad request response
func (o *GetUploadSessionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUploadSessionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetUploadSessionDefault Get upload session error

swagger:response getUploadSessionDefault
*/
type GetUploadSessionDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUploadSessionDefault creates GetUploadSessionDefault with default headers values
func NewGetUploadSessionDefault(code int) *GetUploadSessionDefault {
	if code <= 0 {
		code = 500
	}

	return &GetUploadSessionDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get upload session default response
func (o *GetUploadSessionDefault) WithStatusCode(code int) *GetUploadSessionDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get upload session default response
func (o *GetUploadSessionDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get upload session default response
func (o *GetUploadSessionDefault) WithPayload(payload *models.Error) *GetUploadSessionDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get upload session default response
func (o *GetUploadSessionDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUploadSessionDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
