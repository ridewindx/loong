package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UploadPartHandlerFunc turns a function with the right signature into a upload part handler
type UploadPartHandlerFunc func(UploadPartParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadPartHandlerFunc) Handle(params UploadPartParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UploadPartHandler interface for that can handle valid upload part params
type UploadPartHandler interface {
	Handle(UploadPartParams, interface{}) middleware.Responder
}

// NewUploadPart creates a new http.Handler for the upload part operation
func NewUploadPart(ctx *middleware.Context, handler UploadPartHandler) *UploadPart {
	return &UploadPart{Context: ctx, Handler: handler}
}

/*UploadPart swagger:route PUT /files/upload_sessions/{SESSION_ID} SuperchargedUpload uploadPart

Upload Part

Upload a part of the file to this session.

*/
type UploadPart struct {
	Context *middleware.Context
	Handler UploadPartHandler
}

func (o *UploadPart) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUploadPartParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
