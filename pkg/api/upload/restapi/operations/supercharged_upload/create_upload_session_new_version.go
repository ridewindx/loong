package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateUploadSessionNewVersionHandlerFunc turns a function with the right signature into a create upload session new version handler
type CreateUploadSessionNewVersionHandlerFunc func(CreateUploadSessionNewVersionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUploadSessionNewVersionHandlerFunc) Handle(params CreateUploadSessionNewVersionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateUploadSessionNewVersionHandler interface for that can handle valid create upload session new version params
type CreateUploadSessionNewVersionHandler interface {
	Handle(CreateUploadSessionNewVersionParams, interface{}) middleware.Responder
}

// NewCreateUploadSessionNewVersion creates a new http.Handler for the create upload session new version operation
func NewCreateUploadSessionNewVersion(ctx *middleware.Context, handler CreateUploadSessionNewVersionHandler) *CreateUploadSessionNewVersion {
	return &CreateUploadSessionNewVersion{Context: ctx, Handler: handler}
}

/*CreateUploadSessionNewVersion swagger:route POST /files/{FILE_ID}/upload_sessions SuperchargedUpload createUploadSessionNewVersion

Create File Upload Session

Use the Uploads API to create a new session to upload a new version of existing file.

*/
type CreateUploadSessionNewVersion struct {
	Context *middleware.Context
	Handler CreateUploadSessionNewVersionHandler
}

func (o *CreateUploadSessionNewVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateUploadSessionNewVersionParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
