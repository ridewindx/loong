package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListPartsHandlerFunc turns a function with the right signature into a list parts handler
type ListPartsHandlerFunc func(ListPartsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListPartsHandlerFunc) Handle(params ListPartsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListPartsHandler interface for that can handle valid list parts params
type ListPartsHandler interface {
	Handle(ListPartsParams, interface{}) middleware.Responder
}

// NewListParts creates a new http.Handler for the list parts operation
func NewListParts(ctx *middleware.Context, handler ListPartsHandler) *ListParts {
	return &ListParts{Context: ctx, Handler: handler}
}

/*ListParts swagger:route GET /files/upload_sessions/{SESSION_ID}/parts SuperchargedUpload listParts

List Parts

Return the list of parts uploaded so far for this session.

*/
type ListParts struct {
	Context *middleware.Context
	Handler ListPartsHandler
}

func (o *ListParts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewListPartsParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
