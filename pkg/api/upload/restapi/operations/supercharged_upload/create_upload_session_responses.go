package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ridewindx/loong/pkg/api/upload/models"
)

// CreateUploadSessionCreatedCode is the HTTP code returned for type CreateUploadSessionCreated
const CreateUploadSessionCreatedCode int = 201

/*CreateUploadSessionCreated The upload session creation would be successful

swagger:response createUploadSessionCreated
*/
type CreateUploadSessionCreated struct {

	/*
	  In: Body
	*/
	Payload *models.UploadSession `json:"body,omitempty"`
}

// NewCreateUploadSessionCreated creates CreateUploadSessionCreated with default headers values
func NewCreateUploadSessionCreated() *CreateUploadSessionCreated {
	return &CreateUploadSessionCreated{}
}

// WithPayload adds the payload to the create upload session created response
func (o *CreateUploadSessionCreated) WithPayload(payload *models.UploadSession) *CreateUploadSessionCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create upload session created response
func (o *CreateUploadSessionCreated) SetPayload(payload *models.UploadSession) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUploadSessionCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUploadSessionBadRequestCode is the HTTP code returned for type CreateUploadSessionBadRequest
const CreateUploadSessionBadRequestCode int = 400

/*CreateUploadSessionBadRequest Bad request. See response body for details.

swagger:response createUploadSessionBadRequest
*/
type CreateUploadSessionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateUploadSessionBadRequest creates CreateUploadSessionBadRequest with default headers values
func NewCreateUploadSessionBadRequest() *CreateUploadSessionBadRequest {
	return &CreateUploadSessionBadRequest{}
}

// WithPayload adds the payload to the create upload session bad request response
func (o *CreateUploadSessionBadRequest) WithPayload(payload *models.Error) *CreateUploadSessionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create upload session bad request response
func (o *CreateUploadSessionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUploadSessionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUploadSessionConflictCode is the HTTP code returned for type CreateUploadSessionConflict
const CreateUploadSessionConflictCode int = 409

/*CreateUploadSessionConflict Name collision occurs.

swagger:response createUploadSessionConflict
*/
type CreateUploadSessionConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateUploadSessionConflict creates CreateUploadSessionConflict with default headers values
func NewCreateUploadSessionConflict() *CreateUploadSessionConflict {
	return &CreateUploadSessionConflict{}
}

// WithPayload adds the payload to the create upload session conflict response
func (o *CreateUploadSessionConflict) WithPayload(payload *models.Error) *CreateUploadSessionConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create upload session conflict response
func (o *CreateUploadSessionConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUploadSessionConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUploadSessionPreconditionFailedCode is the HTTP code returned for type CreateUploadSessionPreconditionFailed
const CreateUploadSessionPreconditionFailedCode int = 412

/*CreateUploadSessionPreconditionFailed Preconditioned failed.

swagger:response createUploadSessionPreconditionFailed
*/
type CreateUploadSessionPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateUploadSessionPreconditionFailed creates CreateUploadSessionPreconditionFailed with default headers values
func NewCreateUploadSessionPreconditionFailed() *CreateUploadSessionPreconditionFailed {
	return &CreateUploadSessionPreconditionFailed{}
}

// WithPayload adds the payload to the create upload session precondition failed response
func (o *CreateUploadSessionPreconditionFailed) WithPayload(payload *models.Error) *CreateUploadSessionPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create upload session precondition failed response
func (o *CreateUploadSessionPreconditionFailed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUploadSessionPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateUploadSessionRequestEntityTooLargeCode is the HTTP code returned for type CreateUploadSessionRequestEntityTooLarge
const CreateUploadSessionRequestEntityTooLargeCode int = 413

/*CreateUploadSessionRequestEntityTooLarge Request entity too large.

swagger:response createUploadSessionRequestEntityTooLarge
*/
type CreateUploadSessionRequestEntityTooLarge struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateUploadSessionRequestEntityTooLarge creates CreateUploadSessionRequestEntityTooLarge with default headers values
func NewCreateUploadSessionRequestEntityTooLarge() *CreateUploadSessionRequestEntityTooLarge {
	return &CreateUploadSessionRequestEntityTooLarge{}
}

// WithPayload adds the payload to the create upload session request entity too large response
func (o *CreateUploadSessionRequestEntityTooLarge) WithPayload(payload *models.Error) *CreateUploadSessionRequestEntityTooLarge {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create upload session request entity too large response
func (o *CreateUploadSessionRequestEntityTooLarge) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUploadSessionRequestEntityTooLarge) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(413)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateUploadSessionDefault File upload error

swagger:response createUploadSessionDefault
*/
type CreateUploadSessionDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateUploadSessionDefault creates CreateUploadSessionDefault with default headers values
func NewCreateUploadSessionDefault(code int) *CreateUploadSessionDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateUploadSessionDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create upload session default response
func (o *CreateUploadSessionDefault) WithStatusCode(code int) *CreateUploadSessionDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create upload session default response
func (o *CreateUploadSessionDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create upload session default response
func (o *CreateUploadSessionDefault) WithPayload(payload *models.Error) *CreateUploadSessionDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create upload session default response
func (o *CreateUploadSessionDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUploadSessionDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
