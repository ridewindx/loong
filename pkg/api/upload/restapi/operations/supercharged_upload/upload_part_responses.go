package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ridewindx/loong/pkg/api/upload/models"
)

// UploadPartOKCode is the HTTP code returned for type UploadPartOK
const UploadPartOKCode int = 200

/*UploadPartOK Part upload would be successful

swagger:response uploadPartOK
*/
type UploadPartOK struct {

	/*
	  In: Body
	*/
	Payload *models.UploadPartResponse `json:"body,omitempty"`
}

// NewUploadPartOK creates UploadPartOK with default headers values
func NewUploadPartOK() *UploadPartOK {
	return &UploadPartOK{}
}

// WithPayload adds the payload to the upload part o k response
func (o *UploadPartOK) WithPayload(payload *models.UploadPartResponse) *UploadPartOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload part o k response
func (o *UploadPartOK) SetPayload(payload *models.UploadPartResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadPartOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadPartBadRequestCode is the HTTP code returned for type UploadPartBadRequest
const UploadPartBadRequestCode int = 400

/*UploadPartBadRequest Bad request. See response body for details.

swagger:response uploadPartBadRequest
*/
type UploadPartBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadPartBadRequest creates UploadPartBadRequest with default headers values
func NewUploadPartBadRequest() *UploadPartBadRequest {
	return &UploadPartBadRequest{}
}

// WithPayload adds the payload to the upload part bad request response
func (o *UploadPartBadRequest) WithPayload(payload *models.Error) *UploadPartBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload part bad request response
func (o *UploadPartBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadPartBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadPartConflictCode is the HTTP code returned for type UploadPartConflict
const UploadPartConflictCode int = 409

/*UploadPartConflict Part conflict. See response body for details.

swagger:response uploadPartConflict
*/
type UploadPartConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadPartConflict creates UploadPartConflict with default headers values
func NewUploadPartConflict() *UploadPartConflict {
	return &UploadPartConflict{}
}

// WithPayload adds the payload to the upload part conflict response
func (o *UploadPartConflict) WithPayload(payload *models.Error) *UploadPartConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload part conflict response
func (o *UploadPartConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadPartConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadPartPreconditionFailedCode is the HTTP code returned for type UploadPartPreconditionFailed
const UploadPartPreconditionFailedCode int = 412

/*UploadPartPreconditionFailed Preconditioned failed. See response body for details.

swagger:response uploadPartPreconditionFailed
*/
type UploadPartPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadPartPreconditionFailed creates UploadPartPreconditionFailed with default headers values
func NewUploadPartPreconditionFailed() *UploadPartPreconditionFailed {
	return &UploadPartPreconditionFailed{}
}

// WithPayload adds the payload to the upload part precondition failed response
func (o *UploadPartPreconditionFailed) WithPayload(payload *models.Error) *UploadPartPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload part precondition failed response
func (o *UploadPartPreconditionFailed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadPartPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadPartRequestRangeNotSatisfiableCode is the HTTP code returned for type UploadPartRequestRangeNotSatisfiable
const UploadPartRequestRangeNotSatisfiableCode int = 416

/*UploadPartRequestRangeNotSatisfiable Request range bit satisfiable. See response body for details.

swagger:response uploadPartRequestRangeNotSatisfiable
*/
type UploadPartRequestRangeNotSatisfiable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadPartRequestRangeNotSatisfiable creates UploadPartRequestRangeNotSatisfiable with default headers values
func NewUploadPartRequestRangeNotSatisfiable() *UploadPartRequestRangeNotSatisfiable {
	return &UploadPartRequestRangeNotSatisfiable{}
}

// WithPayload adds the payload to the upload part request range not satisfiable response
func (o *UploadPartRequestRangeNotSatisfiable) WithPayload(payload *models.Error) *UploadPartRequestRangeNotSatisfiable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload part request range not satisfiable response
func (o *UploadPartRequestRangeNotSatisfiable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadPartRequestRangeNotSatisfiable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(416)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UploadPartDefault Part upload error

swagger:response uploadPartDefault
*/
type UploadPartDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadPartDefault creates UploadPartDefault with default headers values
func NewUploadPartDefault(code int) *UploadPartDefault {
	if code <= 0 {
		code = 500
	}

	return &UploadPartDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the upload part default response
func (o *UploadPartDefault) WithStatusCode(code int) *UploadPartDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the upload part default response
func (o *UploadPartDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the upload part default response
func (o *UploadPartDefault) WithPayload(payload *models.Error) *UploadPartDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload part default response
func (o *UploadPartDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadPartDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
