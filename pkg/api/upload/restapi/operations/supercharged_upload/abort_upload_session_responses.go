package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ridewindx/loong/pkg/api/upload/models"
)

// AbortUploadSessionNoContentCode is the HTTP code returned for type AbortUploadSessionNoContent
const AbortUploadSessionNoContentCode int = 204

/*AbortUploadSessionNoContent Abort would be successful

swagger:response abortUploadSessionNoContent
*/
type AbortUploadSessionNoContent struct {
}

// NewAbortUploadSessionNoContent creates AbortUploadSessionNoContent with default headers values
func NewAbortUploadSessionNoContent() *AbortUploadSessionNoContent {
	return &AbortUploadSessionNoContent{}
}

// WriteResponse to the client
func (o *AbortUploadSessionNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

// AbortUploadSessionBadRequestCode is the HTTP code returned for type AbortUploadSessionBadRequest
const AbortUploadSessionBadRequestCode int = 400

/*AbortUploadSessionBadRequest Bad request. See response body for details.

swagger:response abortUploadSessionBadRequest
*/
type AbortUploadSessionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAbortUploadSessionBadRequest creates AbortUploadSessionBadRequest with default headers values
func NewAbortUploadSessionBadRequest() *AbortUploadSessionBadRequest {
	return &AbortUploadSessionBadRequest{}
}

// WithPayload adds the payload to the abort upload session bad request response
func (o *AbortUploadSessionBadRequest) WithPayload(payload *models.Error) *AbortUploadSessionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the abort upload session bad request response
func (o *AbortUploadSessionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AbortUploadSessionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AbortUploadSessionDefault Get upload session error

swagger:response abortUploadSessionDefault
*/
type AbortUploadSessionDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAbortUploadSessionDefault creates AbortUploadSessionDefault with default headers values
func NewAbortUploadSessionDefault(code int) *AbortUploadSessionDefault {
	if code <= 0 {
		code = 500
	}

	return &AbortUploadSessionDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the abort upload session default response
func (o *AbortUploadSessionDefault) WithStatusCode(code int) *AbortUploadSessionDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the abort upload session default response
func (o *AbortUploadSessionDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the abort upload session default response
func (o *AbortUploadSessionDefault) WithPayload(payload *models.Error) *AbortUploadSessionDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the abort upload session default response
func (o *AbortUploadSessionDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AbortUploadSessionDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
