package supercharged_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadPartParams creates a new UploadPartParams object
// with the default values initialized.
func NewUploadPartParams() UploadPartParams {
	var ()
	return UploadPartParams{}
}

// UploadPartParams contains all the bound params for the upload part operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadPart
type UploadPartParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Byte range of part within overall file. E.g: bytes 8388608-16777215/445856194. It must not overlap with the range of a part already uploaded to this session.
	  Required: true
	  In: header
	*/
	ContentRange string
	/*The message digest of the partbody, formatted as specified by RFC 3230. The usage is sha=BASE64_ENCODED_DIGEST. Currently only SHA-1 is supported.As per RFC 3230, the output from SHA-1 algorithm must be Base64 encoded.
	  Required: true
	  In: header
	*/
	Digest string
	/*
	  Required: true
	  In: path
	*/
	SESSIONID string
	/*Part bytes
	  Required: true
	  In: body
	*/
	Bytes *strfmt.Base64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UploadPartParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := o.bindContentRange(r.Header[http.CanonicalHeaderKey("Content-Range")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindDigest(r.Header[http.CanonicalHeaderKey("Digest")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rSESSIONID, rhkSESSIONID, _ := route.Params.GetOK("SESSION_ID")
	if err := o.bindSESSIONID(rSESSIONID, rhkSESSIONID, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body strfmt.Base64
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("bytes", "body"))
			} else {
				res = append(res, errors.NewParseError("bytes", "body", "", err))
			}

		} else {

			if len(res) == 0 {
				o.Bytes = &body
			}
		}

	} else {
		res = append(res, errors.Required("bytes", "body"))
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadPartParams) bindContentRange(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Content-Range", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("Content-Range", "header", raw); err != nil {
		return err
	}

	o.ContentRange = raw

	return nil
}

func (o *UploadPartParams) bindDigest(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Digest", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("Digest", "header", raw); err != nil {
		return err
	}

	o.Digest = raw

	return nil
}

func (o *UploadPartParams) bindSESSIONID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.SESSIONID = raw

	return nil
}
