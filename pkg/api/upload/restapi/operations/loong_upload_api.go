package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ridewindx/loong/pkg/api/upload/restapi/operations/file_upload"
	"github.com/ridewindx/loong/pkg/api/upload/restapi/operations/supercharged_upload"
)

// NewLoongUploadAPI creates a new LoongUpload instance
func NewLoongUploadAPI(spec *loads.Document) *LoongUploadAPI {
	return &LoongUploadAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		BinConsumer:           runtime.ByteStreamConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		SuperchargedUploadAbortUploadSessionHandler: supercharged_upload.AbortUploadSessionHandlerFunc(func(params supercharged_upload.AbortUploadSessionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SuperchargedUploadAbortUploadSession has not yet been implemented")
		}),
		SuperchargedUploadCommitUploadSessionHandler: supercharged_upload.CommitUploadSessionHandlerFunc(func(params supercharged_upload.CommitUploadSessionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SuperchargedUploadCommitUploadSession has not yet been implemented")
		}),
		SuperchargedUploadCreateUploadSessionHandler: supercharged_upload.CreateUploadSessionHandlerFunc(func(params supercharged_upload.CreateUploadSessionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SuperchargedUploadCreateUploadSession has not yet been implemented")
		}),
		SuperchargedUploadCreateUploadSessionNewVersionHandler: supercharged_upload.CreateUploadSessionNewVersionHandlerFunc(func(params supercharged_upload.CreateUploadSessionNewVersionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SuperchargedUploadCreateUploadSessionNewVersion has not yet been implemented")
		}),
		SuperchargedUploadGetUploadSessionHandler: supercharged_upload.GetUploadSessionHandlerFunc(func(params supercharged_upload.GetUploadSessionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SuperchargedUploadGetUploadSession has not yet been implemented")
		}),
		SuperchargedUploadListPartsHandler: supercharged_upload.ListPartsHandlerFunc(func(params supercharged_upload.ListPartsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SuperchargedUploadListParts has not yet been implemented")
		}),
		FileUploadUploadFileHandler: file_upload.UploadFileHandlerFunc(func(params file_upload.UploadFileParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FileUploadUploadFile has not yet been implemented")
		}),
		FileUploadUploadFileVersionHandler: file_upload.UploadFileVersionHandlerFunc(func(params file_upload.UploadFileVersionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FileUploadUploadFileVersion has not yet been implemented")
		}),
		SuperchargedUploadUploadPartHandler: supercharged_upload.UploadPartHandlerFunc(func(params supercharged_upload.UploadPartParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SuperchargedUploadUploadPart has not yet been implemented")
		}),

		OAuth2SecurityAuth: func(token string, scopes []string) (interface{}, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (OAuth2Security) has not yet been implemented")
		},
	}
}

/*LoongUploadAPI The Box Uploads API allows users to add a new file or add a new file version in the same way as uploading file. */
type LoongUploadAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/octet-stream" mime type
	BinConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// OAuth2SecurityAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	OAuth2SecurityAuth func(string, []string) (interface{}, error)

	// SuperchargedUploadAbortUploadSessionHandler sets the operation handler for the abort upload session operation
	SuperchargedUploadAbortUploadSessionHandler supercharged_upload.AbortUploadSessionHandler
	// SuperchargedUploadCommitUploadSessionHandler sets the operation handler for the commit upload session operation
	SuperchargedUploadCommitUploadSessionHandler supercharged_upload.CommitUploadSessionHandler
	// SuperchargedUploadCreateUploadSessionHandler sets the operation handler for the create upload session operation
	SuperchargedUploadCreateUploadSessionHandler supercharged_upload.CreateUploadSessionHandler
	// SuperchargedUploadCreateUploadSessionNewVersionHandler sets the operation handler for the create upload session new version operation
	SuperchargedUploadCreateUploadSessionNewVersionHandler supercharged_upload.CreateUploadSessionNewVersionHandler
	// SuperchargedUploadGetUploadSessionHandler sets the operation handler for the get upload session operation
	SuperchargedUploadGetUploadSessionHandler supercharged_upload.GetUploadSessionHandler
	// SuperchargedUploadListPartsHandler sets the operation handler for the list parts operation
	SuperchargedUploadListPartsHandler supercharged_upload.ListPartsHandler
	// FileUploadUploadFileHandler sets the operation handler for the upload file operation
	FileUploadUploadFileHandler file_upload.UploadFileHandler
	// FileUploadUploadFileVersionHandler sets the operation handler for the upload file version operation
	FileUploadUploadFileVersionHandler file_upload.UploadFileVersionHandler
	// SuperchargedUploadUploadPartHandler sets the operation handler for the upload part operation
	SuperchargedUploadUploadPartHandler supercharged_upload.UploadPartHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *LoongUploadAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *LoongUploadAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *LoongUploadAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *LoongUploadAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *LoongUploadAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *LoongUploadAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *LoongUploadAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the LoongUploadAPI
func (o *LoongUploadAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OAuth2SecurityAuth == nil {
		unregistered = append(unregistered, "OAuth2SecurityAuth")
	}

	if o.SuperchargedUploadAbortUploadSessionHandler == nil {
		unregistered = append(unregistered, "supercharged_upload.AbortUploadSessionHandler")
	}

	if o.SuperchargedUploadCommitUploadSessionHandler == nil {
		unregistered = append(unregistered, "supercharged_upload.CommitUploadSessionHandler")
	}

	if o.SuperchargedUploadCreateUploadSessionHandler == nil {
		unregistered = append(unregistered, "supercharged_upload.CreateUploadSessionHandler")
	}

	if o.SuperchargedUploadCreateUploadSessionNewVersionHandler == nil {
		unregistered = append(unregistered, "supercharged_upload.CreateUploadSessionNewVersionHandler")
	}

	if o.SuperchargedUploadGetUploadSessionHandler == nil {
		unregistered = append(unregistered, "supercharged_upload.GetUploadSessionHandler")
	}

	if o.SuperchargedUploadListPartsHandler == nil {
		unregistered = append(unregistered, "supercharged_upload.ListPartsHandler")
	}

	if o.FileUploadUploadFileHandler == nil {
		unregistered = append(unregistered, "file_upload.UploadFileHandler")
	}

	if o.FileUploadUploadFileVersionHandler == nil {
		unregistered = append(unregistered, "file_upload.UploadFileVersionHandler")
	}

	if o.SuperchargedUploadUploadPartHandler == nil {
		unregistered = append(unregistered, "supercharged_upload.UploadPartHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *LoongUploadAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *LoongUploadAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "OAuth2Security":

			result[name] = o.BearerAuthenticator(scheme.Name, o.OAuth2SecurityAuth)

		}
	}
	return result

}

// ConsumersFor gets the consumers for the specified media types
func (o *LoongUploadAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *LoongUploadAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *LoongUploadAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the loong upload API
func (o *LoongUploadAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *LoongUploadAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/files/upload_sessions/{SESSION_ID}"] = supercharged_upload.NewAbortUploadSession(o.context, o.SuperchargedUploadAbortUploadSessionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/files/upload_sessions/{SESSION_ID}/commit"] = supercharged_upload.NewCommitUploadSession(o.context, o.SuperchargedUploadCommitUploadSessionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/files/upload_sessions"] = supercharged_upload.NewCreateUploadSession(o.context, o.SuperchargedUploadCreateUploadSessionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/files/{FILE_ID}/upload_sessions"] = supercharged_upload.NewCreateUploadSessionNewVersion(o.context, o.SuperchargedUploadCreateUploadSessionNewVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/upload_sessions/{SESSION_ID}"] = supercharged_upload.NewGetUploadSession(o.context, o.SuperchargedUploadGetUploadSessionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/upload_sessions/{SESSION_ID}/parts"] = supercharged_upload.NewListParts(o.context, o.SuperchargedUploadListPartsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/files/content"] = file_upload.NewUploadFile(o.context, o.FileUploadUploadFileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/files/{FILE_ID}/content"] = file_upload.NewUploadFileVersion(o.context, o.FileUploadUploadFileVersionHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/files/upload_sessions/{SESSION_ID}"] = supercharged_upload.NewUploadPart(o.context, o.SuperchargedUploadUploadPartHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *LoongUploadAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *LoongUploadAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
