package file_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ridewindx/loong/pkg/api/upload/models"
)

// UploadFileCreatedCode is the HTTP code returned for type UploadFileCreated
const UploadFileCreatedCode int = 201

/*UploadFileCreated The upload would be successful

swagger:response uploadFileCreated
*/
type UploadFileCreated struct {

	/*
	  In: Body
	*/
	Payload *models.FileList `json:"body,omitempty"`
}

// NewUploadFileCreated creates UploadFileCreated with default headers values
func NewUploadFileCreated() *UploadFileCreated {
	return &UploadFileCreated{}
}

// WithPayload adds the payload to the upload file created response
func (o *UploadFileCreated) WithPayload(payload *models.FileList) *UploadFileCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload file created response
func (o *UploadFileCreated) SetPayload(payload *models.FileList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadFileCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadFileConflictCode is the HTTP code returned for type UploadFileConflict
const UploadFileConflictCode int = 409

/*UploadFileConflict Name collision occurs

swagger:response uploadFileConflict
*/
type UploadFileConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadFileConflict creates UploadFileConflict with default headers values
func NewUploadFileConflict() *UploadFileConflict {
	return &UploadFileConflict{}
}

// WithPayload adds the payload to the upload file conflict response
func (o *UploadFileConflict) WithPayload(payload *models.Error) *UploadFileConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload file conflict response
func (o *UploadFileConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadFileConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UploadFileDefault File upload error

swagger:response uploadFileDefault
*/
type UploadFileDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadFileDefault creates UploadFileDefault with default headers values
func NewUploadFileDefault(code int) *UploadFileDefault {
	if code <= 0 {
		code = 500
	}

	return &UploadFileDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the upload file default response
func (o *UploadFileDefault) WithStatusCode(code int) *UploadFileDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the upload file default response
func (o *UploadFileDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the upload file default response
func (o *UploadFileDefault) WithPayload(payload *models.Error) *UploadFileDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload file default response
func (o *UploadFileDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadFileDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
