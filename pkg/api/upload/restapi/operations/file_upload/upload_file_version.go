package file_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UploadFileVersionHandlerFunc turns a function with the right signature into a upload file version handler
type UploadFileVersionHandlerFunc func(UploadFileVersionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadFileVersionHandlerFunc) Handle(params UploadFileVersionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UploadFileVersionHandler interface for that can handle valid upload file version params
type UploadFileVersionHandler interface {
	Handle(UploadFileVersionParams, interface{}) middleware.Responder
}

// NewUploadFileVersion creates a new http.Handler for the upload file version operation
func NewUploadFileVersion(ctx *middleware.Context, handler UploadFileVersionHandler) *UploadFileVersion {
	return &UploadFileVersion{Context: ctx, Handler: handler}
}

/*UploadFileVersion swagger:route POST /files/{FILE_ID}/content FileUpload uploadFileVersion

Upload File Version

This method is used to upload a new version of an existing file in a userâ€™s account.

*/
type UploadFileVersion struct {
	Context *middleware.Context
	Handler UploadFileVersionHandler
}

func (o *UploadFileVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUploadFileVersionParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
